;; -*- scheme-*-

;; Here is the simplest exchange you can do with an XMMS2 server. You create a
;; connection object, then use that object to connect to the server and then
;; you send the HELLO message to the server, to which the server will reply.
;;
;; The script prints the reply from the server to stdout.

(use-modules (ice-9 format)
             (rnrs bytevectors)
             (xmms2 io)
             (xmms2 ipc main)
             (xmms2 jump-table)
             (xmms2 header)
             (xmms2 data-conversion)
             (xmms2 constants))

;; You'll notice the "socat" in the unix socket name here. What this hints at
;; is the use of socat to look at the byte-stream between client and server.
;; The thing is that it is impossible to sniff unix socket connections with
;; something like wireshark. But you can insert something that provides a
;; socket to a client and forwards everything to another socket while printing
;; all the traffic that goes through that pipe. "socat" does exactly that.
;;
;; Here is how I construct such a printing connection:
;;
;;    socat -t100 -x -v \
;;          UNIX-LISTEN:/tmp/xmms-ipc-"$USER".socat,mode=700,reuseaddr \
;;          fork \
;;          UNIX-CONNECT:/tmp/xmms-ipc-"$USER"
;;
;; Where "$USER" is my user name on the system, which is why getlogin is used
;; in the expression below.
(define server (make-xmms2-connection
                (string-concatenate (list "unix:///tmp/xmms-ipc-"
                                          (getlogin)
                                          ".socat"))))
(xmms2-connect server)
(xmms2-send server (make-hello PROTOCOL-VERSION "example-hello-server"
                               #:cookie 42))

;; Get the response from the server:
(define response (xmms2-recv server))

;; Extract the header from the response:
(define header (car response))

(format #t "Entire server response:~%")
(format #t "~a~%" response)
(format #t "Deconstruct header:~%")
(format #t "object-type: ~x~%" (header->object-type header))
(format #t "command-id: ~x~%" (header->command-id header))
(format #t "cookie: ~d~%" (header->cookie header))
(define pl (header->payload-length header))
(format #t "payload-length: ~d~%" pl)

;; The response from xmms2-recv contains a parsed version of the payload-length
;; and that should better match the payload-length field from the header.
(format #t "Payload length from header ~a payload from response list.~%"
        (if (= pl (cadr response))
            "matches"
            "does NOT match"))

(define payload (caddr response))

;; In addition, the length of the payload byte-vector has to match that number
;; as well. If it doesn't either the server sends faulty data, data gets lost
;; in the transmission channel or we got a bug in this library.
(format #t "The length of the payload buffer ~a payload from response list.~%"
        (if (= pl (bytevector-length payload))
            "matches"
            "does NOT match"))

(define expected-length 12)

(if (and (= pl expected-length)
         (= (bytevector-length (caddr response)) expected-length))
    (format #t "Payload length yields expected value. Good!~%")
    (begin (format #t "Payload length looks fishy. Giving up.~%")
           (exit 1)))

(define (incorrect-type payload)
  (format #t "Server did NOT return integer client ID!~%")
  (let ((n (uint32-ref payload 0)))
    (format #t "Type code ~d suggests: ~a~%"
            n (assoc-ref xref-types n)))
  (exit 1))

(define (correct-type payload)
  (format #t "Analysing payload data...~%client-id: ~d~%"
          (uint64-ref payload 4)))

;; Build a trivial jump-table to get the client id from the server response's
;; payload. The type tag is four octets wide, the int64 data is eight bytes
;; wide. Hence, we expected twelve bytes earlier on.
(define jmptbl (make-jump-table (table (TYPE-INT64 correct-type))
                                #:others incorrect-type))

(apply-jump-table jmptbl (uint32-ref payload 0) payload)
