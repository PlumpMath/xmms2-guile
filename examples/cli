;; -*- scheme-*-

(use-modules (ice-9 format)
             (xmms2 constants)
             (xmms2 io)
             (xmms2 ipc main)
             (xmms2 ipc media-library)
             (xmms2 ipc playlist)
             (xmms2 ipc playback)
             (xmms2 payload))

(define generator-map `(("play" . ,make-start)
                        ("stop" . ,make-stop)
                        ("pause" . ,make-pause)
                        ("tickle" . ,make-kill-decoder)
                        ("next" . ,(lambda () (make-set-next/relative 1)))
                        ("prev" . ,(lambda () (make-set-next/relative -1)))
                        ("active-playlist" . ,make-get-currently-active)
                        ("time" . ,make-get-playtime)
                        ("statistics" . ,make-statistics)
                        ("list" . ,(lambda ()
                                     (xmms2-send server (make-get-currently-active))
                                     (let ((cur (payload->value
                                                 (caddr (xmms2-recv server)))))
                                       (make-list-entries cur))))))

(define (cmd->generator cmd)
  (let ((rv (assoc cmd generator-map)))
    (and rv (cdr rv))))

(define (usage)
  (format #t "usage: cli COMMAND~%")
  (format #t "Available commands: ~a~%"
          (string-join (map car generator-map) ", ")))

(unless (= 2 (length (command-line)))
  (usage)
  (quit 0))

(define command (cadr (command-line)))
(define generator (cmd->generator command))

(unless generator
  (usage)
  (quit 0))

(define server (make-xmms2-connection
                (string-concatenate (list "unix:///tmp/xmms-ipc-"
                                          (getlogin)
                                          ".socat"))))
(setlocale LC_ALL "")
(xmms2-connect server)
(xmms2-send server (make-hello PROTOCOL-VERSION "example-sync-client"))
(xmms2-recv server)
(xmms2-send server (generator))

(define (fetch-info id)
  (xmms2-send server (make-get-information id))
  (payload->value (caddr (xmms2-recv server))))

(define (get-info info default)
  (if (not info) default
      (cdadr info)))

(define (format-track info)
  (let ((artist (assoc "artist" info))
        (album (assoc "album" info))
        (title (assoc "title" info))
        (tracknr (assoc "tracknr" info)))
    (format #t "~a - ~a - ~2,'0d. ~a~%"
            (get-info artist "<NoArtist>")
            (get-info album "<NoAlbum>")
            (get-info tracknr 0)
            (get-info title "<NoTitle>"))))

(let ((reply (xmms2-recv server)))
  (cond
   ((string=? command "statistics")
    (for-each (lambda (x)
                (let ((name (car x))
                      (value (cdr x)))
                  (format #t "~10,,,@a: ~a~%" name value)))
              (payload->value (caddr reply))))
   ((string=? command "list")
    (for-each (lambda (x) (format-track (fetch-info x)))
              (payload->value (caddr reply))))
   ((string=? command "active-playlist")
    (format #t "Active Playlist: ~a~%" (payload->string (caddr reply))))
   ((string=? command "time")
    (let* ((time-ms (payload->int64 (caddr reply)))
           (ms (modulo time-ms 1000))
           (time (truncate (/ time-ms 1000)))
           (min (truncate (/ time 60)))
           (sec (modulo time 60)))
      (format #t "Current playtime:  ~d:~2,'0d.~3,'0d~%" min sec ms)))
   (else #t)))
(when (or (string=? command "next")
          (string=? command "prev"))
  (xmms2-send server (make-kill-decoder))
  (xmms2-recv server))
(xmms2-disconnect server)
