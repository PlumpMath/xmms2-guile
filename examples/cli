;; -*- scheme-*-

(use-modules (xmms2 constants)
             (xmms2 io)
             (xmms2 ipc main)
             (xmms2 ipc playlist)
             (xmms2 ipc playback))

(define generator-map `(("play" . ,make-start)
                        ("stop" . ,make-stop)
                        ("pause" . ,make-pause)
                        ("tickle" . ,make-kill-decoder)
                        ("next" . ,(lambda () (make-set-next/relative 1)))
                        ("prev" . ,(lambda () (make-set-next/relative -1)))))

(define (cmd->generator cmd)
  (let ((rv (assoc cmd generator-map)))
    (and rv (cdr rv))))

(define (usage)
  (format #t "usage: cli COMMAND~%")
  (format #t "Available commands: ~a~%"
          (string-join (map car generator-map) ", ")))

(unless (= 2 (length (command-line)))
  (usage)
  (quit 0))

(define command (cadr (command-line)))
(define generator (cmd->generator command))

(unless generator
  (usage)
  (quit 0))

(define server (make-xmms2-connection
                (string-concatenate (list "unix:///tmp/xmms-ipc-"
                                          (getlogin)
                                          ".socat"))))
(xmms2-connect server)
(xmms2-send server (make-hello PROTOCOL-VERSION "example-sync-client"))
(xmms2-recv server)
(xmms2-send server (generator))
(xmms2-recv server)
(when (or (string=? command "next")
          (string=? command "prev"))
  (xmms2-send server (make-kill-decoder))
  (xmms2-recv server))
(xmms2-disconnect server)
